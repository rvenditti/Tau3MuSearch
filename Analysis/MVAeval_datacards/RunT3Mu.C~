#define RunT3Mu_cxx
#include "RunT3Mu.h"
#include <TH2.h>
#include <TStyle.h>
#include <TCanvas.h>
#include <TMVA/Reader.h>


void RunT3Mu::Loop()
{
//   In a ROOT session, you can do:
//      root> .L RunT3Mu.C
//      root> RunT3Mu t
//      root> t.GetEntry(12); // Fill t data members with entry number 12
//      root> t.Show();       // Show values of entry 12
//      root> t.Show(16);     // Read and show values of entry 16
//      root> t.Loop();       // Loop on all entries
//

//     This is the loop skeleton where:
//    jentry is the global entry number in the chain
//    ientry is the entry number in the current Tree
//  Note that the argument to GetEntry must be:
//    jentry for TChain::GetEntry
//    ientry for TTree::GetEntry and TBranch::GetEntry
//
//       To read only selected branches, Insert statements like:
// METHOD1:
//    fChain->SetBranchStatus("*",0);  // disable all branches
//    fChain->SetBranchStatus("branchname",1);  // activate branchname
// METHOD2: replace line
//    fChain->GetEntry(jentry);       //read all branches
//by  b_branchname->GetEntry(ientry); //read only this branch


  TFile *fOut = new TFile("datacardT3Mu_A.root","recreate");
   if (fChain == 0) return;

   Long64_t nentries = fChain->GetEntriesFast();

   Long64_t nbytes = 0, nb = 0;


   TH1F * hTriplMass = new TH1F ("hSignal","D and B contribution",42, 1.600000, 2.020000);;


   for (Long64_t jentry=0; jentry<nentries;jentry++) {
      Long64_t ientry = LoadTree(jentry);
      if (ientry < 0) break;
      nb = fChain->GetEntry(jentry);   nbytes += nb;
      // if (Cut(ientry) < 0) continue;
      cout<<jentry<<" etaTrip="<<Eta_tripl<<endl;

      float forBDTevaluation1 = Pmu3;
      float forBDTevaluation2 = cLP;
      float  forBDTevaluation3 = tKink;
      float  forBDTevaluation4 = segmComp;
      float  forBDTevaluation5 = fv_nC;
      float  forBDTevaluation6 = fv_dphi3D;
      float  forBDTevaluation7 = fv_d3Dsig;
      float  forBDTevaluation8 = d0sig;
      float  forBDTevaluation9 = mindca_iso;
      float  forBDTevaluation10 = TripletMass;

      TMVA::Tools::Instance();

      reader = new TMVA::Reader( "!Color:!Silent" );

   reader->TMVA::Reader::AddVariable( "Pmu3", &forBDTevaluation1 );
   reader->TMVA::Reader::AddVariable( "cLP", &forBDTevaluation2 );
   reader->TMVA::Reader::AddVariable( "tKink", &forBDTevaluation3 );
   reader->TMVA::Reader::AddVariable( "segmComp", &forBDTevaluation4 );
   reader->TMVA::Reader::AddVariable( "fv_nC", &forBDTevaluation5 );
   reader->TMVA::Reader::AddVariable( "fv_dphi3D", &forBDTevaluation6 );
   reader->TMVA::Reader::AddVariable( "fv_d3Dsig", &forBDTevaluation7 );
   reader->TMVA::Reader::AddVariable( "d0sig", &forBDTevaluation8 );
 
   reader->TMVA::Reader::AddVariable( "mindca_iso", &forBDTevaluation9 );
      reader->TMVA::Reader::AddSpectator( "TripletMass", &forBDTevaluation10 );

   //reader->TMVA::Reader::AddVariable( "trkRel", &forBDTevaluation10 );

   reader->TMVA::Reader::BookMVA( "BDT", "/lustrehome/fsimone/MVA_Cate/dataset_A/weights/TMVA_new_BDT.weights.xml");

   double BDT_decision = reader->EvaluateMVA("BDT");
     //EvaluateMVA( Pmu3, cLP,tKink, segmComp,fv_nC,fv_dphi3D, fv_d3Dsig, d0sig, mindca_iso);
    cout<<" dec "<< BDT_decision<<endl;
    
    if( BDT_decision > 0.1)   {
      hTriplMass->Fill(TripletMass);
    }
    fOut->cd();
    hTriplMass->Write();
      
   }

}
